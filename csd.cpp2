#include <cmath> // for fabs, pow, ceil, log2
#include <iostream>
#include <string>

using std::abs;
using std::ceil;
using std::fabs;
using std::log2;
using std::pow;
using std::string;

to_decimal : (csd : *const char)->int = {num : = 0.0;
beg_ptr : *const char = csd;
loc_ptr : *const char = csd;
while
  csd * != '\0' next csd++ {
  digit:
    = csd *;
    if digit
      == '0' { num *= 2; }
    else {
      if digit
        == '+' { num = num * 2 + 1; }
      else {
        if digit
          == '-' { num = num * 2 - 1; }
        else {
          if digit
            == '\0' { break; }
          else {
            if digit
              == '.' { loc_ptr = csd + 1; }
          }
        }
      }
    }
  }
if loc_ptr
  != beg_ptr { num /= pow(2.0, csd - loc_ptr); }
return num;
}
to_decimal_i : (csd : *char)->int = {num : = 0;
while
  true next csd++ {
  digit:
    = csd *;
    if digit
      == '0' { num *= 2; }
    else {
      if digit
        == '+' { num = num * 2 + 1; }
      else {
        if digit
          == '-' { num = num * 2 - 1; }
        else {
          if digit
            == '\0' { break; }
        }
      }
    }
  }
return num;
}

to_csd_i : (num : int)->string = {if num == 0 {return "0";
}
p2n : int = static_cast<int>(pow(2.0, ceil(log2(abs(num) * 1.5))));
csd : string = "";
while
  p2n > 1 {
  p2n_half:
    = p2n / 2;
  det:
    = 3 * num;
    if det
      > p2n {
        csd += '+';
        num -= p2n_half;
      }
    else {
      if det
        < -p2n {
          csd += '-';
          num += p2n_half;
        }
      else {
        csd += '0';
      }
    }
    p2n = p2n_half;
  }
return csd;
}
